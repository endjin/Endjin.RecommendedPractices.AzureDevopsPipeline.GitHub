# This template is designed for builds using the Endjin.RecommendedPractices.Build module:
#   https://www.powershellgallery.com/packages/Endjin.RecommendedPractices.Build
#   https://github.com/endjin/Endjin.RecommendedPractices.Build
# The majority of the build process is executed by a `build.ps1` script in the root of the
# project.
#
# With scripted builds, many of the extensibility points exposed by `build.and.release.yml`
# (e.g. `preBuild`, `postBuild`, `preRunExecutableSpecs`, etc.) are now supplied by the
# build script, and not this Azure DevOps template.
# However, there are still some extensibility points specific to the Azure DevOps pipeline
# execution.
parameters:
  preCustomEnvironmentVariables: []
  postCustomEnvironmentVariables: []
  prePublishCodeCoverageReport: []
  postPublishCodeCoverageReport: []
  preCopyNugetPackages: []
  postCopyNugetPackages: []
  prePublishReleaseArtifacts: []
  postPublishReleaseArtifacts: []
  preCreateGitHubRelease: []
  postCreateGitHubRelease: []
  prePublishNugetPackages: []
  postPublishNugetPackages: []
  vmImage: ''
  service_connection_nuget_org: ''
  service_connection_github: ''
  netSdkVersion: '6.x'
  additionalNetSdkVersions: []
  includeNetSdkPreviewVersions: 'false'
  compileTasks: 'Build,Analysis'
  testTasks: 'Test,TestReport'
  packageTasks: 'Package'
  compileTasksServiceConnection: ''
  internalVstsFeed: 'endjin-nuget-pre-releases'

jobs:
- job: Build
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    BuildConfiguration: 'Release'
    ${{ if or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment']) }}:
      BuildScriptLogLevel: 'detailed'
    ${{ else }}:
      BuildScriptLogLevel: 'minimal'
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    PackagesOutputDirName: '_packages'


    # We have dependencies on the following Environment Variables:
    # BUILD_REPOSITORY_NAME
    # BUILD_REPOSITORY_PROVIDER
    # SYSTEM_COLLECTIONURI

    # We have dependencies on the following Build Variables:
    # Endjin_Service_Connection_NuGet_Org
    # Endjin_Service_Connection_GitHub
    # Endjin_Slack_ReleasesWebhookUri
    # Endjin.ForcePublish
    # Endjin.InternalPublish
  steps:
  - powershell: |
      if ($env:BUILD_REPOSITORY_PROVIDER -eq "GitHub") {
        $orgName = ($env:BUILD_REPOSITORY_NAME -split "/")[0]
        $repoName = ($env:BUILD_REPOSITORY_NAME -split "/")[1]
      }
      else {
        $orgName = ($env:SYSTEM_COLLECTIONURI -split "/")[3]
        $repoName = $env:BUILD_REPOSITORY_NAME
      }

      Write-Host "##vso[task.setvariable variable=Endjin_GitPlatform;isoutput=true]$($env:BUILD_REPOSITORY_PROVIDER.ToLower())"
      Write-Host "##vso[task.setvariable variable=Endjin_GitOrgName;isoutput=true]$orgName"
      Write-Host "##vso[task.setvariable variable=Endjin_GitRepoName;isoutput=true]$repoName"
    name: GitRepoMetadata
    displayName: 'Set Git Metadata Variables'
    env:
      BUILD_REPOSITORY_PROVIDER: $(BUILD_REPOSITORY_PROVIDER)
      BUILD_REPOSITORY_NAME: $(BUILD_REPOSITORY_NAME)
      SYSTEM_COLLECTIONURI: $(SYSTEM_COLLECTIONURI)

  - checkout: self
    fetchDepth: 0
    submodules: recursive

  - template: install-dotnet-sdks.yml
    parameters:
      netSdkVersion: ${{ parameters.netSdkVersion }}
      additionalNetSdkVersions: ${{ parameters.additionalNetSdkVersions }}
      includeNetSdkPreviewVersions: ${{ parameters.includeNetSdkPreviewVersions }}

  - ${{ parameters.preCustomEnvironmentVariables }}

  - ${{ parameters.postCustomEnvironmentVariables }}

  # Useful for debugging purposes
  - powershell: 'gci Env:'
    condition: or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment'])
    displayName: 'Print Environment Variables'

  - task: PowerShell@2
    condition: and(succeeded(), eq('${{ parameters.compileTasksServiceConnection }}', ''))
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)/build.ps1
      arguments: >
        -Configuration $(BuildConfiguration)
        -BuildRepositoryUri $(Build.Repository.Uri)
        -SourcesDir $(Build.SourcesDirectory)
        -CoverageDir $(Build.SourcesDirectory)/CodeCoverage
        -LogLevel $(BuildScriptLogLevel)
        -Tasks ${{ parameters.compileTasks }}
      pwsh: true
    name: RunCompile
    displayName: 'Build Solution (no auth)'
    env:
      NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget-packages
      BUILDVAR_PublishCovenantOutputToStorage: 'False'
      BUILDVAR_CovenantMetadata: >
        {
          "git_provider": "$(GitRepoMetadata.Endjin_GitPlatform)",
          "git_org": "$(GitRepoMetadata.Endjin_GitOrgName)",
          "git_repo": "$(GitRepoMetadata.Endjin_GitRepoName)",
          "git_branch": "${{ variables['Build.SourceBranch'] }}", 
          "git_sha": "${{ variables['Build.SourceVersion'] }}"
        }

  - task: AzureCLI@2
    condition: and(succeeded(), ne('${{ parameters.compileTasksServiceConnection }}', ''))
    inputs:
      azureSubscription: ${{ parameters.compileTasksServiceConnection }}
      scriptType: pscore
      scriptLocation: scriptPath
      scriptPath: $(Build.SourcesDirectory)/build.ps1
      arguments: >
        -Configuration $(BuildConfiguration)
        -BuildRepositoryUri $(Build.Repository.Uri)
        -SourcesDir $(Build.SourcesDirectory)
        -CoverageDir $(Build.SourcesDirectory)/CodeCoverage
        -LogLevel $(BuildScriptLogLevel)
        -Tasks ${{ parameters.compileTasks }}
    name: RunCompile_with_AzAuth
    displayName: 'Build Solution (with auth)'
    env:
      NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget-packages
      BUILDVAR_AnalysisOutputStorageAccountName: endsynapsedatalake
      BUILDVAR_AnalysisOutputContainerName: data
      BUILDVAR_AnalysisOutputBlobPath: openchain/covenant/raw/src_platform=$(GitRepoMetadata.Endjin_GitPlatform)/org=$(GitRepoMetadata.Endjin_GitOrgName)/repo=$(GitRepoMetadata.Endjin_GitRepoName)
      BUILDVAR_PublishCovenantOutputToStorage: 'True'
      BUILDVAR_CovenantMetadata: >
        {
          "git_provider": "$(GitRepoMetadata.Endjin_GitPlatform)",
          "git_org": "$(GitRepoMetadata.Endjin_GitOrgName)",
          "git_repo": "$(GitRepoMetadata.Endjin_GitRepoName)",
          "git_branch": "${{ variables['Build.SourceBranch'] }}", 
          "git_sha": "${{ variables['Build.SourceVersion'] }}"
        }

  # Scripted build 0.1.0 sets all the GitVersion outputs into environment variables with a
  # GITVERSION_ prefix, but currently, due to this bug:
  #  https://github.com/endjin/Endjin.RecommendedPractices.Build/issues/3
  # when it emits them as Build Variables, it does not include the prefix. Environment variable
  # set by the build script are only available while the build script runs, so it's the build
  # variables we have to depend on here.
  # We're giving them an Endjin_ prefix here so we've got a stable name to refer to them by
  # elsewhere in the script, so that if the scripted build is updated to reinstate the GITVERSION_
  # prefix for these build variables, we only have to change them in one place.
  - powershell: |
      Write-Host "##vso[task.setvariable variable=Endjin_IsPreRelease]$(-not ([string]::IsNullOrEmpty($Env:PreReleaseTag)))"
      Write-Host "##vso[task.setvariable variable=Endjin_PreReleaseTag]$Env:PreReleaseTag"
      Write-Host "##vso[task.setvariable variable=Endjin_SemVer]$Env:SemVer"
    displayName: 'Set Version Information Build Variables'
    env:
      PreReleaseTag: $(GitVersion.PreReleaseTag)
      SemVer: $(GitVersion.SemVer)

  # ref: https://marketplace.visualstudio.com/items?itemName=LakshayKaushik.PublishHTMLReports
  - task: publishhtmlreport@1
    displayName: 'Publish SBOM Report'
    inputs:
      htmlType: 'genericHTML'
      ${{ if eq(parameters.compileTasksServiceConnection, '') }}:
        htmlPath: '$(RunCompile.SbomHtmlReportPath)'
      ${{ else }}:
        htmlPath: '$(RunCompile_with_AzAuth.SbomHtmlReportPath)'

  - task: PublishPipelineArtifact@1
    displayName: Store Compilation Outputs
    inputs:
      targetPath: '$(Build.SourcesDirectory)'
      artifactType: 'pipeline'
      artifactName: 'build'


- job: Test
  dependsOn: Build
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    BuildConfiguration: 'Release'
    ${{ if or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment']) }}:
      BuildScriptLogLevel: 'detailed'
    ${{ else }}:
      BuildScriptLogLevel: 'minimal'
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    PackagesOutputDirName: '_packages'
  steps:
  - template: install-dotnet-sdks.yml
    parameters:
      netSdkVersion: ${{ parameters.netSdkVersion }}
      additionalNetSdkVersions: ${{ parameters.additionalNetSdkVersions }}
      includeNetSdkPreviewVersions: ${{ parameters.includeNetSdkPreviewVersions }}
  - task: DownloadPipelineArtifact@2
    displayName: Retrieve Compilation Outputs
    inputs:
      buildType: 'current'
      artifactName: build
      targetPath: $(Build.SourcesDirectory)

  - ${{ parameters.preCustomEnvironmentVariables }}

  - ${{ parameters.postCustomEnvironmentVariables }}

  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: "$(Build.SourcesDirectory)/build.ps1"
      arguments: >
        -Configuration $(BuildConfiguration)
        -BuildRepositoryUri $(Build.Repository.Uri)
        -SourcesDir $(Build.SourcesDirectory)
        -CoverageDir $(Build.SourcesDirectory)/CodeCoverage
        -LogLevel $(BuildScriptLogLevel)
        -Tasks ${{ parameters.testTasks }}
      pwsh: true
    name: RunTests
    displayName: 'Run Tests'
    env:
      NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget-packages
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)     # required by the custom test logger

  - ${{ parameters.prePublishCodeCoverageReport }}

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

  - ${{ parameters.postPublishCodeCoverageReport }}


- job: Package
  dependsOn: Test
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    BuildConfiguration: 'Release'
    ${{ if or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment']) }}:
      BuildScriptLogLevel: 'detailed'
    ${{ else }}:
      BuildScriptLogLevel: 'minimal'
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    PackagesOutputDirName: '_packages'
    Endjin_IsPreRelease: $[ dependencies.Build.outputs['GitRepoMetadata.Endjin_IsPreRelease'] ]
    Endjin_PreReleaseTag: $[ dependencies.Build.outputs['GitRepoMetadata.Endjin_PreReleaseTag'] ]
    Endjin_SemVer: $[ dependencies.Build.outputs['GitRepoMetadata.Endjin_SemVer'] ]

  steps:
  - template: install-dotnet-sdks.yml
    parameters:
      netSdkVersion: ${{ parameters.netSdkVersion }}
      additionalNetSdkVersions: ${{ parameters.additionalNetSdkVersions }}
      includeNetSdkPreviewVersions: ${{ parameters.includeNetSdkPreviewVersions }}

  - task: DownloadPipelineArtifact@2
    displayName: Retrieve Compilation Outputs
    inputs:
      buildType: 'current'
      artifactName: build
      targetPath: $(Build.SourcesDirectory)

  - ${{ parameters.preCustomEnvironmentVariables }}

  - ${{ parameters.postCustomEnvironmentVariables }}
        
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: "$(Build.SourcesDirectory)/build.ps1"
      arguments: >
        -Configuration $(BuildConfiguration)
        -BuildRepositoryUri $(Build.Repository.Uri)
        -SourcesDir $(Build.SourcesDirectory)
        -CoverageDir $(Build.SourcesDirectory)/CodeCoverage
        -PackagesDir $(PackagesOutputDirName)
        -LogLevel $(BuildScriptLogLevel)
        -Tasks ${{ parameters.packageTasks }}
      pwsh: true
    name: RunPackage
    displayName: 'Build Packages'
    env:
      NUGET_PACKAGES: $(Build.SourcesDirectory)/.nuget-packages

  - ${{ parameters.preCopyNugetPackages }}

  - pwsh: |
      # Ensure we have a 'Release' folder as this needs to exist for the next step
      $nugetDropDir = Join-Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY "Release" "NuGet"
      if (!(Test-Path $nugetDropDir)) { New-Item -ItemType Directory -Path $nugetDropDir }

      # Copy any packages that were produced
      Get-ChildItem -Path $env:PACKAGES_OUTPUT_DIR_NAME -Filter *.nupkg -Recurse | Copy-Item -Destination $nugetDropDir -Verbose
      Get-ChildItem -Path $env:PACKAGES_OUTPUT_DIR_NAME -Filter *.snupkg -Recurse | Copy-Item -Destination $nugetDropDir -Verbose
    displayName: 'Copy Nuget Packages To Release Folder'
    env:
      PACKAGES_OUTPUT_DIR_NAME: $(PackagesOutputDirName)

  - ${{ parameters.postCopyNugetPackages }}
  - ${{ parameters.prePublishReleaseArtifacts }}

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Release Artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/Release'
      artifactType: 'pipeline'
      artifactName: 'drop'

  - ${{ parameters.postPublishReleaseArtifacts }}

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.1.0'
  
  - ${{ parameters.preCreateGitHubRelease }}

  - pwsh: |
      Write-Host "Repository Name: '$($env:BUILD_REPOSITORY_NAME)'"
      Write-Host "Endjin_SemVer: '$($env:Endjin_SemVer)'"
      Write-Host "Endjin.ForcePublish: '$($env:Endjin_ForcePublish)'"
      Write-Host "Endjin.InternalPublish: '$($env:Endjin_InternalPublish)'"
      Write-Host "Endjin_PreReleaseTag: '$($env:Endjin_PreReleaseTag)'"
      Write-Host "Endjin_IsPreRelease: '$($env:Endjin_IsPreRelease)'"
    displayName: Debug release condition parameters
    env:
      Endjin_SemVer: $(Endjin_SemVer)
      Endjin_ForcePublish: ${{ variables['Endjin.ForcePublish'] }}
      Endjin_InternalPublish: ${{ variables['Endjin.InternalPublish'] }}
      Endjin_PreReleaseTag: $(Endjin_PreReleaseTag)
      Endjin_IsPreRelease: $(Endjin_IsPreRelease)

  - task: GithubRelease@1 
    displayName: 'Create GitHub Release'
    condition: and(succeeded(), or(eq(variables['Endjin.ForcePublish'], 'true'), eq(variables['Endjin_PreReleaseTag'], '')))
    inputs:
      gitHubConnection: ${{ parameters.service_connection_github }}
      repositoryName: $(Build.Repository.Name)
      tagSource: userSpecifiedTag
      tag: $(Endjin_SemVer)
      isPreRelease: $(Endjin_IsPreRelease)
      assets: |
          $(Build.ArtifactStagingDirectory)/Release/**

  - ${{ parameters.postCreateGitHubRelease }}

  - ${{ parameters.prePublishNugetPackages }}

  - task: NuGetCommand@2
    displayName: 'Publish to internal feed'
    condition: and(succeeded(), eq(variables['Endjin.InternalPublish'], 'true'))
    inputs:
      command: push
      nuGetFeedType: internal
      publishVstsFeed: ${{ parameters.internalVstsFeed }}
      versioningScheme: Off
      packagesToPush: '$(Build.ArtifactStagingDirectory)/Release/**/*.nupkg'

  - task: NuGetCommand@2
    displayName: 'Publish to nuget.org'
    condition: and(succeeded(), or(eq(variables['Endjin.ForcePublish'], 'true'), eq(variables['Endjin_PreReleaseTag'], '')))
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: ${{ parameters.service_connection_nuget_org }}
      versioningScheme: Off
      packagesToPush: '$(Build.ArtifactStagingDirectory)/Release/**/*.nupkg'

  - ${{ parameters.postPublishNugetPackages }}

  - pwsh: |
      $body = @{
        username = "endjin-bot"
        icon_emoji = ":mike:"
      }

      Write-Host "Build_ArtifactStagingDirectory: $($env:Build_ArtifactStagingDirectory)"
      Write-Host "Listing of '$($env:Build_ArtifactStagingDirectory)/Release/NuGet)':"
      gci -recurse "$($env:Build_ArtifactStagingDirectory)/Release/NuGet" | Out-String | Write-Host
      $packages = gci -Recurse -Filter *.nupkg -Path "$($env:Build_ArtifactStagingDirectory)/Release/NuGet"
      Write-Host $packages

      $blocks = @()
      $blocks += @{ type = "header"; text = @{ type = "plain_text";  text = "New release for $($env:Endjin_Repository_Name) : $($env:GitVersion_SemVer)" } }
      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = "The following packages have been published to <https://nuget.org|NuGet>:" } }

      $packagesText = ""

      foreach ($p in $packages) {
          $packageName = [IO.Path]::GetFileNameWithoutExtension($p.Name) -replace ".$($env:GitVersion_SemVer)",""
          $packagesText += "•  <https://nuget.org/packages/$packageName/$($env:GitVersion_SemVer)|$packageName>`n"
      }

      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = $packagesText } }
      $blocks += @{ type = "divider" }
      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = "The GitHub release can be found <https://github.com/$($env:Endjin_Repository_Name)/releases/tag/$($env:GitVersion_SemVer)|here>" } }

      $body += @{ blocks = $blocks }
      Write-Host "body:`n$(ConvertTo-Json $body -Depth 99)"
      Invoke-RestMethod -uri "$($env:Endjin_Slack_ReleasesWebhookUri)" `
                        -Method Post `
                        -body (ConvertTo-Json $body -Depth 99) `
                        -ContentType 'application/json'
    condition: and(succeeded(), or(eq(variables['Endjin.ForcePublish'], 'true'), eq(variables['Endjin_PreReleaseTag'], '')), ne(variables['Endjin_Slack_ReleasesWebhookUri'], ''))
    displayName: Send notification to Slack channel
    env:
      Endjin_Slack_ReleasesWebhookUri: $(Endjin_Slack_ReleasesWebhookUri)
      Endjin_Repository_Name: $(Build.Repository.Name)
      GitVersion_SemVer: $(Endjin_SemVer)
      Build_ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
