parameters:
  preCustomEnvironmentVariables: []
  postCustomEnvironmentVariables: []
  preBuild: []
  postBuild: []
  preCopyNugetPackages: []
  postCopyNugetPackages: []
  prePublishReleaseArtifacts: []
  postPublishReleaseArtifacts: []
  preCreateGitHubRelease: []
  postCreateGitHubRelease: []
  prePublishNugetPackages: []
  postPublishNugetPackages: []
  vmImage: ''
  service_connection_nuget_org: '' 
  service_connection_github: '' 
  build_script: ''
  build_task: '.'
  netSdkVersion: '3.x'

jobs:
- job: Build
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    BuildConfiguration: 'Release'
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    # We have dependencies on the following Environment Variables:
    # GITVERSION_PRERELEASETAG
    # BUILD_REPOSITORY_NAME

    # We have dependencies on the following Build Variables:
    # Endjin_Service_Connection_NuGet_Org
    # Endjin_Service_Connection_GitHub
    # Endjin.ForcePublish
  steps:
  - template: install.dotnet-global-tools.workaround.yml
    parameters:
      netSdkVersion: ${{ parameters.netSdkVersion }}

  - ${{ parameters.preCustomEnvironmentVariables }}

  - powershell: |
      Write-Host "##vso[task.setvariable variable=Endjin_IsPreRelease]$((-not ([string]::IsNullOrEmpty($Env:GITVERSION_PRERELEASETAG))))"
      Write-Host "##vso[task.setvariable variable=Endjin_Repository_Name]$Env:BUILD_REPOSITORY_NAME"
    displayName: 'Set Environment Variables'

  - powershell: |
      Write-Host "Initializing $(Build.ArtifactStagingDirectory)/Release"
      New-Item -Path $(Build.ArtifactStagingDirectory) -Name "Release" -ItemType "directory"
    displayName: 'Initialize Artifact Staging Release Directory'

  - ${{ parameters.postCustomEnvironmentVariables }}

  # Useful for debugging purposes
  - powershell: 'gci Env:'
    condition: or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment'])
    displayName: 'Print Environment Variables'

  - ${{ parameters.preBuild }}

  # Executes the 'InvokeBuild' build script
  - pwsh: |
      if (!(Get-Module -ListAvailable InvokeBuild)) {
        Install-Module InvokeBuild -Repository PSGalley -Force
      }
      Import-Module InvokeBuild
      Invoke-Build "${{ parameters.build_script }}" `
                   -Task "${{ parameters.build_task }}" `
                   -Configuration "$(BuildConfiguration)" `
                   -BuildRepositoryUri "$(Build.Repository.Uri)" `
                   -SourcesDir "$(Build.SourcesDirectory)" `
                   -CoverageDir "$(Build.SourcesDirectory)/CodeCoverage" `
                   -TestReportTypes "HtmlInline_AzurePipelines;Cobertura" `
                   -PackagesDir "$(Build.ArtifactStagingDirectory)/Packages/$(Build.BuildID)"
    workingDirectory: $(Build.SourcesDirectory)

  - ${{ parameters.preBuild }}

  - ${{ parameters.preCopyNugetPackages }}

  - task: CopyFiles@2
    displayName: 'Copy Nuget Packages To Release Folder'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: |
        Packages/**/*.nupkg
        Packages/**/*.snupkg
      TargetFolder: '$(Build.ArtifactStagingDirectory)/Release/NuGet'

  - ${{ parameters.postCopyNugetPackages }}
  - ${{ parameters.prePublishReleaseArtifacts }}

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Release Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Release'

  - ${{ parameters.postPublishReleaseArtifacts }}

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.1.0'
  
  - ${{ parameters.preCreateGitHubRelease }}

  - task: GithubRelease@0 
    displayName: 'Create GitHub Release'      
    condition: and(succeeded(), or(variables['Endjin.ForcePublish'], eq(variables['GitVersion.PreReleaseTag'], '')))
    inputs:
      gitHubConnection: ${{ parameters.service_connection_github }}
      repositoryName: $(Endjin_Repository_Name)
      tagSource: manual
      tag: $(GitVersion.SemVer) 
      isPreRelease: $(Endjin_IsPreRelease)
      assets: |
          $(Build.ArtifactStagingDirectory)/Release/**

  - ${{ parameters.postCreateGitHubRelease }}

  - ${{ parameters.prePublishNugetPackages }}

  - task: NuGetCommand@2
    displayName: 'Publish to nuget.org'
    condition: and(succeeded(), or(variables['Endjin.ForcePublish'], eq(variables['GitVersion.PreReleaseTag'], '')))
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: ${{ parameters.service_connection_nuget_org }}
      versioningScheme: byBuildNumber
      packagesToPush: '$(Build.ArtifactStagingDirectory)/Release/**/*.nupkg'

  - ${{ parameters.postPublishNugetPackages }}

  - pwsh: |
      $body = @{
        username = "endjin-bot"
        icon_emoji = ":mike:"
      }

      Write-Host "Build_ArtifactStagingDirectory: $($env:Build_ArtifactStagingDirectory)"
      $packages = gci -Recurse -Filter *.nupkg -Path "$($env:Build_ArtifactStagingDirectory)/Release/NuGet/Packages"
      Write-Host $packages

      $blocks = @()
      $blocks += @{ type = "header"; text = @{ type = "plain_text";  text = "New release for $($env:Endjin_Repository_Name) : $($env:GitVersion_SemVer)" } }
      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = "The following packages have been published to <https://nuget.org|NuGet>:" } }

      $packagesText = ""

      foreach ($p in $packages) {
          $packageName = [IO.Path]::GetFileNameWithoutExtension($p.Name) -replace ".$($env:GitVersion_SemVer)",""
          $packagesText += "â€¢  <https://nuget.org/packages/$packageName/$($env:GitVersion_SemVer)|$packageName>`n"
      }

      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = $packagesText } }
      $blocks += @{ type = "divider" }
      $blocks += @{ type = "section"; text = @{ type = "mrkdwn";  text = "The GitHub release can be found <https://github.com/$($env:Endjin_Repository_Name)/releases/tag/$($env:GitVersion_SemVer)|here>" } }

      $body += @{ blocks = $blocks }
      Write-Host "body:`n$(ConvertTo-Json $body -Depth 99)"
      Invoke-RestMethod -uri "$($env:Endjin_Slack_ReleasesWebhookUri)" `
                        -Method Post `
                        -body (ConvertTo-Json $body -Depth 99) `
                        -ContentType 'application/json'
    condition: and(succeeded(), or(variables['Endjin.ForcePublish'], eq(variables['GitVersion.PreReleaseTag'], '')), ne(variables['Endjin_Slack_ReleasesWebhookUri'], ''))
    displayName: Send notification to Slack channel
    env:
      Endjin_Slack_ReleasesWebhookUri: $(Endjin_Slack_ReleasesWebhookUri)
      Endjin_Repository_Name: $(Endjin_Repository_Name)
      GitVersion_SemVer: $(GitVersion.SemVer)
      Build_ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
      