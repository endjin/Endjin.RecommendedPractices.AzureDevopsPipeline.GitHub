parameters:
  preCustomEnvironmentVariables: []
  postCustomEnvironmentVariables: []
  preBuild: []
  postBuild: []
  preRunExecutableSpecs: []
  postRunExecutableSpecs: []
  preSpecsReport: []
  postSpecsReport: []
  prePublishCodeCoverageReport: []
  postPublishCodeCoverageReport: []
  postSpecs: []
  preCreateNuGetPackages: []
  postCreateNuGetPackages: []
  postPack: []
  preCopyNugetPackages: []
  postCopyNugetPackages: []
  prePublishReleaseArtifacts: []
  postPublishReleaseArtifacts: []
  vmImage: ''
  service_connection_nuget_org: '' 
  service_connection_github: '' 
  solution_to_build: ''
  netSdkVersion: '3.x'

jobs:
- job: Build
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    BuildConfiguration: 'Release'
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    SolutionToBuild: ${{ parameters.solution_to_build }}

    # We have dependencies on the following Environment Variables:
    # GITVERSION_PRERELEASETAG
    # BUILD_REPOSITORY_NAME

    # We have dependencies on the following Build Variables:
    # Endjin_Service_Connection_NuGet_Org
    # Endjin_Service_Connection_GitHub
    # Endjin.ForcePublish
  steps:
  - template: install.dotnet-global-tools.workaround.yml
    parameters:
      netSdkVersion: ${{ parameters.netSdkVersion }}
  - template: install-and-run-gitversion.yml

  - ${{ parameters.preCustomEnvironmentVariables }}

  - powershell: |
      Write-Host "##vso[task.setvariable variable=Endjin_IsPreRelease]$((-not ([string]::IsNullOrEmpty($Env:GITVERSION_PRERELEASETAG))))"
      Write-Host "##vso[task.setvariable variable=Endjin_Repository_Name]$Env:BUILD_REPOSITORY_NAME"
    displayName: 'Set Environment Variables'

  - powershell: |
      Write-Host "Initializing $(Build.ArtifactStagingDirectory)/Release"
      New-Item -Path $(Build.ArtifactStagingDirectory) -Name "Release" -ItemType "directory"
    displayName: 'Initialize Artifact Staging Release Directory'

  - ${{ parameters.postCustomEnvironmentVariables }}

  # Useful for debugging purposes
  - powershell: 'gci Env:'
    condition: or(variables['Endjin.BuildDiagnostics'], variables['Endjin.ShowEnvironment'])
    displayName: 'Print Environment Variables'

  - ${{ parameters.preBuild }}

  - task: DotNetCoreCLI@2
    displayName: 'Restore & Build'
    inputs:
      command: 'build'
      projects: $(SolutionToBuild)
      arguments: '--configuration $(BuildConfiguration) /p:Version=$(GitVersion.SemVer)'
      versioningScheme: byBuildNumber
      buildProperties: 'EndjinRepositoryUrl="$(Build.Repository.Uri)"'

  - ${{ parameters.postBuild }}
  
  - ${{ parameters.preRunExecutableSpecs }}

  - task: DotNetCoreCLI@2
    displayName: 'Run Executable Specifications'
    inputs:
      command: 'test'
      projects: $(SolutionToBuild)
      arguments: '-c $(BuildConfiguration) --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      nobuild: true
  
  - ${{ parameters.postRunExecutableSpecs }}

  - ${{ parameters.preSpecsReport }}

  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator "-reports:$(Build.SourcesDirectory)/**/**/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    displayName: 'Generate Code Coverage Report'

  - ${{ parameters.postSpecsReport }}

  - ${{ parameters.prePublishCodeCoverageReport }}

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Report'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

  - ${{ parameters.postPublishCodeCoverageReport }}

  - ${{ parameters.postSpecs }}

  - ${{ parameters.preCreateNuGetPackages }}

  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet Packages'
    inputs:
      command: 'pack'
      projects: $(SolutionToBuild)
      outputDir: '$(Build.ArtifactStagingDirectory)/Packages/$(Build.BuildID)'
      nobuild: true
      versioningScheme: byEnvVar
      versionEnvVar: GitVersion.SemVer
      buildProperties: 'EndjinRepositoryUrl="$(Build.Repository.Uri)"'

  - ${{ parameters.postCreateNuGetPackages }}

  - ${{ parameters.postPack }}

  - ${{ parameters.preCopyNugetPackages }}

  - task: CopyFiles@2
    displayName: 'Copy Nuget Packages To Release Folder'
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)'
      Contents: |
        Packages/**/*.nupkg
        Packages/**/*.snupkg
      TargetFolder: '$(Build.ArtifactStagingDirectory)/Release/NuGet'

  - ${{ parameters.postCopyNugetPackages }}
  - ${{ parameters.prePublishReleaseArtifacts }}

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Release Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Release'

  - ${{ parameters.postPublishReleaseArtifacts }}

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.1.0'

  - task: GithubRelease@0 
    displayName: 'Create GitHub Release'      
    condition: and(succeeded(), or(variables['Endjin.ForcePublish'], eq(variables['GitVersion.PreReleaseTag'], '')))
    inputs:
      gitHubConnection: ${{ parameters.service_connection_github }}
      repositoryName: $(Endjin_Repository_Name)
      tagSource: manual
      tag: $(GitVersion.SemVer) 
      isPreRelease: $(Endjin_IsPreRelease)
      assets: |
          $(Build.ArtifactStagingDirectory)/Release/**

  - task: NuGetCommand@2
    displayName: 'Publish to nuget.org'
    condition: and(succeeded(), or(variables['Endjin.ForcePublish'], eq(variables['GitVersion.PreReleaseTag'], '')))
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: ${{ parameters.service_connection_nuget_org }}
      versioningScheme: byBuildNumber
      packagesToPush: '$(Build.ArtifactStagingDirectory)/Packages/**/*.nupkg'